plugins {
    id 'java'
    id 'io.qameta.allure' version '3.0.0'
    id 'io.freefair.lombok' version '8.14.2'
}

group = 'org.wikipedia'
version = '1.0.0'

ext {
    junitJupiterVersion = '5.13.4'
    restAssuredVersion = '5.5.6'
    allureVersion = '2.29.1'
    selenideVersion = '7.10.0'
    assertjVersion = '3.27.4'
    ownerVersion = '1.0.12'
    appiumVersion = '10.0.0'
    commonsVersion = '2.20.0'
    aspectjWeaverVersion = '1.9.24'
    slf4jVersion = '2.0.17'
    allureCommandlineVersion = '2.35.1'
}

allure {
    version = allureCommandlineVersion
    adapter {
        allureJavaVersion = allureVersion
        aspectjVersion = aspectjWeaverVersion
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            platform("org.junit:junit-bom:$junitJupiterVersion"),
            "org.junit.jupiter:junit-jupiter",
            "org.junit.platform:junit-platform-launcher",
            platform("io.rest-assured:rest-assured-bom:$restAssuredVersion"),
            "io.rest-assured:rest-assured",
            "io.rest-assured:json-schema-validator",
            platform("io.qameta.allure:allure-bom:$allureVersion"),
            "io.qameta.allure:allure-junit5",
            "io.qameta.allure:allure-rest-assured",
            "io.qameta.allure:allure-selenide",
            "com.codeborne:selenide:$selenideVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.appium:java-client:$appiumVersion",
            "commons-io:commons-io:$commonsVersion"
    )
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform {
        if (project.hasProperty("includeTags")) {
            includeTags project.findProperty("includeTags").toString()
        }
    }

    systemProperties(System.getProperties())
    systemProperty "remote.isRemote", project.findProperty("remote") ?: "false"
    systemProperty "host", project.findProperty("remote") == "true" ? "browserstack" : "local"

    testLogging {
        lifecycle {
            events "started", "passed", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
